// Copyright 2023 Dimitri Koshkin. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/exec/exec.go

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// IsKubectlCommand mocks base method.
func (m *MockRunner) IsKubectlCommand(in string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKubectlCommand", in)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKubectlCommand indicates an expected call of IsKubectlCommand.
func (mr *MockRunnerMockRecorder) IsKubectlCommand(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKubectlCommand", reflect.TypeOf((*MockRunner)(nil).IsKubectlCommand), in)
}

// KubernetesClusterRunning mocks base method.
func (m *MockRunner) KubernetesClusterRunning() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesClusterRunning")
	ret0, _ := ret[0].(error)
	return ret0
}

// KubernetesClusterRunning indicates an expected call of KubernetesClusterRunning.
func (mr *MockRunnerMockRecorder) KubernetesClusterRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesClusterRunning", reflect.TypeOf((*MockRunner)(nil).KubernetesClusterRunning))
}

// Run mocks base method.
func (m *MockRunner) Run(command string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRunnerMockRecorder) Run(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), command)
}
