// Copyright 2023 Dimitri Koshkin. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/assistant/assistant.go

// Package assistant is a generated GoMock package.
package assistant

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// CanRunKubectlCommand mocks base method.
func (m *MockRunner) CanRunKubectlCommand() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanRunKubectlCommand")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanRunKubectlCommand indicates an expected call of CanRunKubectlCommand.
func (mr *MockRunnerMockRecorder) CanRunKubectlCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanRunKubectlCommand", reflect.TypeOf((*MockRunner)(nil).CanRunKubectlCommand))
}

// GetResponse mocks base method.
func (m *MockRunner) GetResponse(ctx context.Context, prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponse", ctx, prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponse indicates an expected call of GetResponse.
func (mr *MockRunnerMockRecorder) GetResponse(ctx, prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponse", reflect.TypeOf((*MockRunner)(nil).GetResponse), ctx, prompt)
}

// RunKubectlCommand mocks base method.
func (m *MockRunner) RunKubectlCommand() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunKubectlCommand")
	ret0, _ := ret[0].(error)
	return ret0
}

// RunKubectlCommand indicates an expected call of RunKubectlCommand.
func (mr *MockRunnerMockRecorder) RunKubectlCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunKubectlCommand", reflect.TypeOf((*MockRunner)(nil).RunKubectlCommand))
}
